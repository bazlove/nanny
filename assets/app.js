// helpers
const $  = (sel, root=document) => root.querySelector(sel);
const $$ = (sel, root=document) => [...root.querySelectorAll(sel)];
const safe = fn => { try { fn && fn(); } catch (e) { console.error(`${fn.name||'init'} failed:`, e); } };

// –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM ‚Äî –∏ –∫–∞–∂–¥–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ try/catch
window.addEventListener('DOMContentLoaded', () => {
  safe(initHeroSlider);      // —Ç–≤–æ–π —Å–ª–∞–π–¥–µ—Ä
  safe(initQuoteRotator);    // —Ä–æ—Ç–∞—Ç–æ—Ä —Ü–∏—Ç–∞—Ç (–µ—Å–ª–∏ –≤—ã–Ω–µ—Å–µ–Ω –≤ —Ñ—É–Ω–∫—Ü–∏—é)
  safe(initSlots);           // –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ—Ç–æ–≤ (–º–æ–∂–µ—Ç –ø–∞–¥–∞—Ç—å ‚Äî –Ω–∞–º –Ω–µ–ª—å–∑—è –ª–æ–º–∞—Ç—å—Å—è)
  safe(initAvailabilityBadge); // –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–π–¥–∂–∞
});

// Console banner
(function(){try{console.log('%cLanding (split files)','background:#16324a;color:#fff;padding:2px 8px;border-radius:6px')}catch(e){}})();

// Burger (mobile)
(function(){
  const b=document.querySelector('.burger'); const head=document.querySelector('.site-header'); const mnav=document.getElementById('mnav');
  if(!b||!head||!mnav) return;
  b.addEventListener('click',()=>{ const open=head.classList.toggle('open'); b.setAttribute('aria-expanded', open?'true':'false'); mnav.hidden=!open; });
})();

// i18n (RU/SR)
(function(){
  const I18N = {
    ru: {
      nav_services:'–£—Å–ª—É–≥–∏', nav_reviews:'–û—Ç–∑—ã–≤—ã', nav_price:'–¶–µ–Ω–∞', nav_faq:'FAQ', nav_contact: "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
      city:'–ù–æ–≤–∏-–°–∞–¥',
      hero_title:'–ù–∞–¥—ë–∂–Ω–∞—è –Ω—è–Ω—è –≤ –ù–æ–≤–∏-–°–∞–¥–µ ‚Äî —Å–ø–æ–∫–æ–π–Ω–æ —Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏–∑ –¥–æ–º–∞',
      hero_sub:'CPR/First Aid, —Ñ–æ—Ç–æ-–æ—Ç—á—ë—Ç –ø–æ—Å–ª–µ –≤–∏–∑–∏—Ç–∞, —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∑–∞–Ω—è—Ç–∏—è, –º–æ—Ç–æ—Ä–∏–∫–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏.',
      trust_safe:'üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', trust_report:'üì∑ –§–æ—Ç–æ-–æ—Ç—á—ë—Ç', trust_no_screens:'üé≤ –†–∞–∑–≤–∏—Ç–∏–µ –±–µ–∑ —ç–∫—Ä–∞–Ω–æ–≤', trust_short_slots:'üïí –°–ª–æ—Ç—ã 2‚Äì4 —á–∞—Å–∞',
      btn_slots:'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã',
      hero_micro:'–û–ø—ã—Ç: –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å –¥–µ—Ç—Å–∞–¥–∞ –∏ –¥–µ—Ç—Å–∫–∏–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä ‚Ä¢ 4.9‚òÖ –ø–æ –æ—Ç–∑—ã–≤–∞–º'
    },
    sr: {
      nav_services:'Usluge', nav_reviews:'Utisci', nav_price:'Cena', nav_faq:'FAQ', nav_contact: "Kontakt",
      city:'Novi Sad',
      hero_title:'Pouzdana dadilja u Novom Sadu ‚Äî radite od kuƒáe bez stresa',
      hero_sub:'CPR/Prva pomoƒá, foto-izve≈°taj posle posete, razvojne aktivnosti, motorika po dogovoru.',
      trust_safe:'üõ°Ô∏è Bezbednost', trust_report:'üì∑ Foto-izve≈°taj', trust_no_screens:'üé≤ Razvoj bez ekrana', trust_short_slots:'üïí Termini 2‚Äì4 sata',
      btn_slots:'Proverite slobodne termine',
      hero_micro:'Iskustvo: vaspitaƒç u vrtiƒáu i deƒçiji fitnes trener ‚Ä¢ 4.9‚òÖ po ocenama'
    }
  };
  function applyLang(lang){
    const d=I18N[lang]||I18N.ru;
    document.documentElement.setAttribute('lang', lang==='sr'?'sr':'ru');
    document.querySelectorAll('.i18n').forEach(el=>{
      const k=el.getAttribute('data-key'); if(k && d[k]!=null) el.textContent=d[k];
    });
    document.querySelectorAll('.lang-btn').forEach(b=>{
      const on=b.getAttribute('data-lang')===lang; b.classList.toggle('active',on); b.setAttribute('aria-pressed', on?'true':'false');
    });
    try{ localStorage.setItem('lang', lang);}catch(e){}
  }
  function init(){
    const q=new URLSearchParams(location.search); const qp=(q.get('lang')||'').toLowerCase();
    let stored; try{ stored=localStorage.getItem('lang'); }catch(e){}
    const lang=(qp==='sr'||qp==='ru')?qp:(stored || ((navigator.language||'ru').toLowerCase().indexOf('sr')===0?'sr':'ru'));
    applyLang(lang);
    document.addEventListener('click', e=>{ const btn=e.target.closest && e.target.closest('.lang-btn'); if(!btn) return; e.preventDefault(); applyLang(btn.getAttribute('data-lang')); });
    window.i18nSetLang=applyLang;
  }
  if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init();
})();

// ===== Hero: —Ä–æ—Ç–∞—Ç–æ—Ä –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ü–∏—Ç–∞—Ç —Ä—è–¥–æ–º —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º =====
(function initQuoteRotator(){
  const el = document.getElementById('quoteRotator');
  if (!el) return;

  const quotes = [
    '¬´–≤—Å–µ–≥–¥–∞ –≤–æ–≤—Ä–µ–º—è, —Ä–µ–±—ë–Ω–æ–∫ —Å–ø–æ–∫–æ–µ–Ω¬ª',
    '¬´–±–µ–∑ —ç–∫—Ä–∞–Ω–æ–≤, —Å–ø–æ–∫–æ–π–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞¬ª',
    '¬´–≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤–∏–∑–∏—Ç–∞¬ª',
    '¬´–º—è–≥–∫–æ –∏ –±–µ—Ä–µ–∂–Ω–æ, –Ω–æ –ø–æ—Ä—è–¥–æ–∫ –µ—Å—Ç—å¬ª'
  ];

  // 1) –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç—ã –∏ —Å–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä–æ–π —Å–ª–æ–π
  const wrap = document.createElement('span');
  wrap.className = 'quote-wrap';
  el.parentNode.replaceChild(wrap, el);

  const a = el;                             // –ø–µ—Ä–≤—ã–π —Å–ª–æ–π
  a.classList.add('quote','is-active');     // —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–Ω—ã–π
  wrap.appendChild(a);

  const b = a.cloneNode(true);              // –≤—Ç–æ—Ä–æ–π —Å–ª–æ–π
  b.removeAttribute('id');
  b.setAttribute('aria-hidden','true');
  b.classList.remove('is-active');
  wrap.appendChild(b);

  // 2) –ö—Ä–æ—Å—Å-—Ñ–µ–π–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏
  let i = 0, visible = a, hidden = b;
  setInterval(() => {
    i = (i + 1) % quotes.length;
    hidden.textContent = quotes[i];

    // –ø–ª–∞–≤–Ω–∞—è —Å–º–µ–Ω–∞ —Å–ª–æ—ë–≤
    visible.classList.remove('is-active');
    hidden.classList.add('is-active');

    // –º–µ–Ω—è–µ–º —Ä–æ–ª–∏
    const tmp = visible; visible = hidden; hidden = tmp;
  }, 7000);
})();

  // Mock one slot today (remove if not needed)
  (function mock(){
    const cal=document.getElementById('slots-calendar'); if(!cal) return;
    const iso=todayISO(new Date());
    if(!cal.querySelector(`[data-date="${iso}"]`)){
      cal.innerHTML = `<div class="slot--free" data-date="${iso}" data-from="16:00" data-to="19:00"></div>`;
    }
  })();
  window.addEventListener('DOMContentLoaded', update);
})();

// === SetBadge: –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞—Å—Å—ã ===
window.setBadge = function setBadge(text, classes = []) {
  const badge = document.querySelector('#headerFreeBadge');
  const badgeText = badge ? badge.querySelector('.avail-text') : null;
  if (!badge || !badgeText) return;

  // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –∫–ª–∞—Å—Å—ã
  ['is-today','is-tomorrow','is-next','is-none','is-live']
    .forEach(c => badge.classList.remove(c));
  classes.forEach(c => badge.classList.add(c));

  badgeText.textContent = text;        // –ù–ï —Ç—Ä–æ–≥–∞–µ–º .dot ‚Üí –ø—É–ª—å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
  badge.style.display = 'inline-flex';
};

// === –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ ===
function safeStart(s) {
  if (s.startLabel) return s.startLabel;
  const d = s.startISO ? new Date(s.startISO) : new Date(s.startTs || 0);
  return isFinite(d) ? d.toLocaleTimeString('ru-RU',{hour:'2-digit',minute:'2-digit'}) : '';
}
function safeEnd(s) {
  if (s.endLabel) return s.endLabel;
  const d = s.endISO ? new Date(s.endISO) : new Date(s.endTs || 0);
  return isFinite(d) ? d.toLocaleTimeString('ru-RU',{hour:'2-digit',minute:'2-digit'}) : '';
}
function getStartTs(s) { return s.startTs ?? Date.parse(s.startISO || 0); }
function timeLabel(s)  { return `${safeStart(s)}‚Äì${safeEnd(s)}`; }

// === –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø updateBadge c —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º .dot –¥–ª—è –ø—É–ª—å—Å–∞ ===
window.updateBadge = function updateBadge(slots) {
  // 0) –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥
  const list = Array.isArray(slots) ? slots : [];
  if (!list.length) {
    setBadge('–°–≤–æ–±–æ–¥–Ω–æ: –ø–æ –∑–∞–ø—Ä–æ—Å—É', ['is-none']); // –ø—É–ª—å—Å –æ—Ç–∫–ª—é—á–∞–µ–º
    return;
  }

  const now         = Date.now();
  const todayYMD    = new Date().toISOString().slice(0,10);
  const tomorrowYMD = new Date(now + 86400000).toISOString().slice(0,10);

  // 1) –°–µ–≥–æ–¥–Ω—è
  const todaySlot = list
    .filter(s => (s.date || (s.startISO||'').slice(0,10)) === todayYMD)
    .sort((a,b) => getStartTs(a) - getStartTs(b))[0];

  if (todaySlot){
    setBadge(`–°–≤–æ–±–æ–¥–Ω–æ —Å–µ–≥–æ–¥–Ω—è ${timeLabel(todaySlot)}`, ['is-today','is-live']);
    return;
  }

  // 2) –ó–∞–≤—Ç—Ä–∞
  const tomorrowSlot = list
    .filter(s => (s.date || (s.startISO||'').slice(0,10)) === tomorrowYMD)
    .sort((a,b) => getStartTs(a) - getStartTs(b))[0];

  if (tomorrowSlot){
    setBadge(`–°–≤–æ–±–æ–¥–Ω–æ –∑–∞–≤—Ç—Ä–∞ ${timeLabel(tomorrowSlot)}`, ['is-tomorrow','is-live']);
    return;
  }

  // 3) –ë–ª–∏–∂–∞–π—à–∏–π –¥–∞–ª–µ–µ
  const next = list
    .filter(s => getStartTs(s) > now)
    .sort((a,b) => getStartTs(a) - getStartTs(b))[0];

  if (next){
    const d   = new Date(next.startISO || getStartTs(next));
    const day = d.toLocaleDateString('ru-RU', { weekday:'short', day:'2-digit', month:'2-digit' });
    setBadge(`–ë–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç: ${day} | ${timeLabel(next)}`, ['is-next','is-live']);
    return;
  }

  // 4) –ò–Ω–∞—á–µ ‚Äî –ø–æ –∑–∞–ø—Ä–æ—Å—É
  setBadge('–°–≤–æ–±–æ–¥–Ω–æ: –ø–æ –∑–∞–ø—Ä–æ—Å—É', ['is-none']);
};

/* ===== Slots: fetch + render + header badge (final) ===== */
(function initSlots(){
  const API_SLOTS_URL =
    'https://script.google.com/macros/s/AKfycbw1sCLUCTPlaiHMFNsqPfgjTH6iCHp391m1lwYRX0g5AO7_Zme1uySp8jgQm9bsaR8EnQ/exec';

  // 2) DOM-—Å—Å—ã–ª–∫–∏
  const wrap  = document.querySelector('#slotsList');
  const hasList = !!wrap;

  const badge = document.querySelector('#headerFreeBadge');
  const badgeText = badge ? badge.querySelector('.avail-text') : null;

  // 3) –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π setter –¥–ª—è –±–µ–π–¥–∂–∞ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º .dot –∏ —Ä–∞–∑–º–µ—Ç–∫—É)
  const setB = (typeof window.setBadge === 'function')
    ? window.setBadge
    : function(text, classes){
        if (!badge || !badgeText) return;
        // —Å–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤, –±–∞–∑–∞ –æ—Å—Ç–∞—ë—Ç—Å—è
        ['is-today','is-tomorrow','is-next','is-none','is-live']
          .forEach(c => badge.classList.remove(c));
        (classes || []).forEach(c => badge.classList.add(c));
        badgeText.textContent = text;
        badge.style.display = 'inline-flex';
      };

  // 4) –ó–∞–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–µ–º –∏ —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
  if (badge) {
    window.__SLOTS_BADGE__ = 'slots';             // —Ñ–ª–∞–≥ –≤–ª–∞–¥–µ–Ω–∏—è
    setB('–ü—Ä–æ–≤–µ—Ä—è—é —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã‚Ä¶', ['is-live']);
  }

  // 5) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–æ—Ç—ã
  fetch(API_SLOTS_URL, { cache: 'no-store', mode: 'cors' })
    .then(r => r.json())
    .then(data => {
      const raw = Array.isArray(data?.slots) ? data.slots
                : Array.isArray(data) ? data : [];
      window.__freeSlots = raw;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ ¬´—É–º–Ω—ã–º¬ª –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
      if (typeof window.updateBadge === 'function') {
        window.updateBadge(raw);
      } else {
        // –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ–ª–ª–±–µ–∫
        if (raw.length) {
          const first = raw[0];
          setB(`–ë–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç ${first.startLabel}‚Äì${first.endLabel}`, ['is-next']);
        } else {
          setB('–°–≤–æ–±–æ–¥–Ω–æ: –ø–æ –∑–∞–ø—Ä–æ—Å—É', ['is-none']);
        }
      }

      // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ –¥–Ω—è–º ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      if (!hasList) return;
      if (!raw.length) {
        wrap.innerHTML = '<p class="muted">–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>';
        return;
      }

      const days = (typeof window.groupByDate === 'function')
        ? window.groupByDate(raw)
        : fallbackGroupByDate(raw);

      const html = days.slice(0, 5)
        .map(d => (typeof window.cardHTML === 'function'
          ? window.cardHTML(d.date, d.items)
          : fallbackCardHTML(d.date, d.items)))
        .join('');

      wrap.innerHTML = html;
    })
    .catch(err => {
      console.warn('Slots API error:', err);
      if (hasList) {
        wrap.innerHTML = '<p class="error">–°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.</p>';
      }
      setB('–°–≤–æ–±–æ–¥–Ω–æ: –ø–æ –∑–∞–ø—Ä–æ—Å—É', ['is-none']); // –Ω–µ –ª–æ–º–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –±–µ–π–¥–∂–∞
    });

  // --- –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ–æ–ª–ª–±–µ–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—Ç–∏–ª–∏—Ç –≤ —Ñ–∞–π–ª–µ ---
  function fallbackGroupByDate(raw){
    const map = {};
    raw.forEach(s => { (map[s.date] = map[s.date] || []).push(s); });
    return Object.keys(map).sort().map(date => ({ date, items: map[date] }));
  }
  function fallbackCardHTML(date, items){
    const lis = items.map(s => `<li>${s.startLabel}‚Äì${s.endLabel}</li>`).join('');
    return `<section class="slot-day"><h4>${date}</h4><ul>${lis}</ul></section>`;
  }
})();

// Calculator

(function(){
  const EUR_RATE=117, BASE=800, WEEKEND=1.25, TWO=1.25, INFANT=1.5, OPT=300, MIN=2, HOURS_MAX=10;
  const $=id=>document.getElementById(id);
  const money=v=>{ try{return v.toLocaleString('ru-RS')}catch(_){return String(v)} };

  function normalizeHours(commit){
    const h=$('hours'), err=$('hoursErr');
    let v=parseInt(h?.value, 10);
    
    const emptyOrNaN = !Number.isFinite(v) || (h?.value==='');
    if (emptyOrNaN) v = MIN;

    // –¥–∏–∞–ø–∞–∑–æ–Ω 2..10
    v = Math.max(MIN, Math.min(HOURS_MAX, v));

    if (commit && h) { h.value = String(v); }

    // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏ —Ç–µ–∫—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ < MIN
    if (h)   { h.classList.toggle('error', v < MIN); }
    if (err) { err.style.display = (v < MIN) ? 'block' : 'none'; }

    return v;
  }

  function hourlyRate(){
    let r=BASE;
    const day=$('dayType')?.value, kids=$('kids')?.value;
    if(day==='weekend') r*=WEEKEND;
    if(kids==='2_infant') r*=INFANT; else if(kids==='2') r*=TWO;
    return Math.round(r/10)*10;
  }

  let last=0;
  const render = (sum) => {
  const eur = $('eurToggle')?.checked;
  let s = `–ò—Ç–æ–≥: ${money(sum)} –¥–∏–Ω`;
  if (eur) {
    const eurVal = Math.round(sum / EUR_RATE);
    s += ` <span class="eur">(‚âà ‚Ç¨${eurVal})</span>`;
  }
  const el = $('result');
  if (el) el.innerHTML = s;
  };
  const animate=(to)=>{
    const from=last; if(from===to){ render(to); return; }
    const start=performance.now(), dur=180, diff=to-from;
    const step=(t)=>{ const p=Math.min(1,(t-start)/dur); render(Math.round(from+diff*p)); if(p<1) requestAnimationFrame(step); else last=to; };
    requestAnimationFrame(step);
  };

  function recalc(commit = true){
    const h = normalizeHours(commit);
    const rate=hourlyRate();
    const add=( $('optA')?.checked?OPT:0 )+( $('optB')?.checked?OPT:0 )+( $('optC')?.checked?OPT:0 );
    const total=rate*h+add; animate(total);

    const br=$('breakdown'); if(br) br.textContent=`–°—Ç–∞–≤–∫–∞: ${rate} –¥–∏–Ω/—á √ó ${h} —á${add?` | –¥–æ–ø. –∑–∞–Ω—è—Ç–∏—è: +${add} –¥–∏–Ω`:''}`;

    const badges=$('badges');
    if(badges){
      const b=[];
      const kids=$('kids')?.value, day=$('dayType')?.value;
      if(kids==='2') b.push('+25% –¥–≤–æ–µ –¥–µ—Ç–µ–π');
      if(kids==='2_infant') b.push('+50% –º–∞–ª—ã—à <2 –ª–µ—Ç');
      if(day==='weekend') b.push('+25% –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å');
      if($('eurToggle')?.checked) b.push('‚Ç¨');
      badges.innerHTML=b.map(t=>`<span class="badge">${t}</span>`).join('');
    }

    const q=new URLSearchParams({
      h:$('hours')?.value||'',
      k:$('kids')?.value||'',
      d:$('dayType')?.value||'',
      a:$('optA')?.checked?1:0,
      b:$('optB')?.checked?1:0,
      c:$('optC')?.checked?1:0,
      eur:$('eurToggle')?.checked?1:0
    });
    try{ history.replaceState(null,'', location.pathname+'?'+q.toString()); }catch(_){}
  }

  function bind(){
  const hoursEl = $('hours');
  if (hoursEl) {
    hoursEl.addEventListener('input', () => {
      normalizeHours(false);  // ‚Üê –ù–ï –∫–æ–º–º–∏—Ç–∏–º –≤–æ –≤—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞
      recalc(false);          // ‚Üê –ø–µ—Ä–µ—Å—á—ë—Ç –±–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∏–Ω–ø—É—Ç
    });
    ['change','blur'].forEach(ev =>
      hoursEl.addEventListener(ev, () => {
        normalizeHours(true); // ‚Üê –∫–æ–º–º–∏—Ç–∏–º –Ω–∞ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–æ–ª—è
        recalc(true);
      })
    );
  }

  ['kids','dayType','optA','optB','optC','eurToggle'].forEach(id=>{
    const el=$(id); if(!el) return;
    ['input','change'].forEach(e=> el.addEventListener(e,recalc));
  });

  const setH=n=>{ const h=$('hours'); if(h){ h.value=String(n); h.focus(); recalc(true); }};
  [['p2h',2],['p3h',3],['p4h',4],['p5h',5]].forEach(([id,val])=>{
    const b=$(id); if(b) b.addEventListener('click',()=>setH(val));
  });
  $('pWeekday')?.addEventListener('click', ()=>{ const d=$('dayType'); if(d){ d.value='weekday'; recalc(); }});
  $('pWeekend')?.addEventListener('click',()=>{ const d=$('dayType'); if(d){ d.value='weekend'; recalc(); }});
  $('pKids2')?.addEventListener('click',()=>{ const k=$('kids'); if(k){ k.value='2'; recalc(); }});

    // –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π –±—É–¥—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    document.addEventListener('click',(ev)=>{
      const chip=ev.target.closest?.('.tag'); if(!chip) return;
      const txt=(chip.textContent||'').toLowerCase();
      if(txt.includes('2 —á')) return setH(2);
      if(txt.includes('3 —á')) return setH(3);
      if(txt.includes('4 —á')) return setH(4);
      if(txt.includes('–≤—ã—Ö–æ–¥–Ω')){ const d=$('dayType'); if(d){ d.value='weekend'; recalc(); } return; }
      if(txt.includes('–¥–≤–∞ —Ä–µ–±—ë–Ω–∫–∞')||txt.includes('–¥–≤–∞ —Ä–µ–±–µ–Ω–∫–∞')){ const k=$('kids'); if(k){ k.value='2'; recalc(); } return; }
    }, true);

    // share
    const share=$('shareLink');
    if(share) share.addEventListener('click', async (e)=>{
      e.preventDefault();
      try{ await navigator.clipboard.writeText(location.href);
           share.classList.add('copied'); setTimeout(()=>share.classList.remove('copied'),1200);
      }catch(_){}
    });
  }

  function fromQuery(){ try{
    const q=new URLSearchParams(location.search);
    if(q.has('h')) $('hours').value=q.get('h');
    if(q.has('k')) $('kids').value=q.get('k');
    if(q.has('d')) $('dayType').value=q.get('d');
    [['a','optA'],['b','optB'],['c','optC'],['eur','eurToggle']].forEach(([k,id])=>{
      if(q.has(k)){ const el=$(id); if(el) el.checked=(q.get(k)==='1'); }
    });
  }catch(_){} }

  if(document.readyState==='loading') document.addEventListener('DOMContentLoaded',()=>{ bind(); fromQuery(); recalc(); });
  else { bind(); fromQuery(); recalc(); }
})();

// Cookie banner + GA4 loader
(function() {
  const LS_KEY='consent_analytics';
  const banner=document.getElementById('cookie-banner');
  const btnAccept=document.getElementById('cookie-accept');
  const btnDecline=document.getElementById('cookie-decline');
  const linkSettings=document.getElementById('cookie-settings');
  const GA_ID=window.__GA_MEASUREMENT_ID__;

  function mountGA(){
    if(!GA_ID || /X{6,}/.test(GA_ID)) return;
    const s=document.createElement('script');
    s.async = true;
    s.src = `https://www.googletagmanager.com/gtag/js?id=${GA_ID}`;
    document.head.appendChild(s);
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    window.gtag = gtag;
    gtag('js', new Date());
    gtag('config', GA_ID, { anonymize_ip: true });
  }

  function consent(state){
    if(typeof gtag==='function'){
      gtag('consent','update', { analytics_storage: state ? 'granted' : 'denied' });
    }
    try{ localStorage.setItem(LS_KEY, state?'granted':'denied'); }catch(e){}
    if(state) mountGA();
  }

  function showBanner(v=true){ banner.hidden = !v; }

  function init(){
    let saved=null; try{ saved=localStorage.getItem(LS_KEY); }catch(e){}
    if(saved==='granted'){ consent(true); }
    else if(saved==='denied'){ consent(false); }
    else { showBanner(true); }
    if(btnAccept) btnAccept.addEventListener('click', ()=>{ consent(true); showBanner(false); });
    if(btnDecline) btnDecline.addEventListener('click', ()=>{ consent(false); showBanner(false); });
    if(linkSettings) linkSettings.addEventListener('click', (e)=>{ e.preventDefault(); showBanner(true); });
  }

  if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init();
})();

// Footer year

const yEl = document.getElementById('y');
if (yEl) yEl.textContent = new Date().getFullYear();

/* ===== FAQ (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è) ===== */
(function () {
  const list = document.querySelector('.faq-list');
  if (!list) return;

  const HEADER_OFFSET = 80; // –≤–∞—à —Ñ–∏–∫—Å-—Ö–µ–¥–µ—Ä (px). –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø—Ä–∞–≤—å—Ç–µ

  function openItem(item, withScroll) {
    const btn   = item.querySelector('.faq-q');
    const panel = item.querySelector('.faq-a');
    if (!btn || !panel) return;

    // –∑–∞–∫—Ä—ã—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    list.querySelectorAll('.faq-item.is-open').forEach(it => {
      if (it !== item) closeItem(it);
    });

    item.classList.add('is-open');
    btn.setAttribute('aria-expanded', 'true');

    // —Å—Ç–∞–≤–∏–º —è–≤–Ω—É—é –≤—ã—Å–æ—Ç—É = –∫–æ–Ω—Ç–µ–Ω—Ç
    const inner = panel.firstElementChild;
    const target = inner ? inner.scrollHeight : panel.scrollHeight;
    panel.style.height = target + 'px';

    // —Å–∫—Ä–æ–ª–ª–∏–º —Ç–∞–∫, —á—Ç–æ–±—ã —à–∞–ø–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –±—ã–ª–∞ –ø–æ–¥ —Ñ–∏–∫—Å-—Ö–µ–¥–µ—Ä–æ–º
    if (withScroll) {
      const y = item.getBoundingClientRect().top + window.scrollY - HEADER_OFFSET - 6;
      window.scrollTo({ top: y, behavior: 'smooth' });
    }
  }

  function closeItem(item) {
    const btn   = item.querySelector('.faq-q');
    const panel = item.querySelector('.faq-a');
    if (!btn || !panel) return;

    item.classList.remove('is-open');
    btn.setAttribute('aria-expanded', 'false');
    panel.style.height = '0px';
  }

  // –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤—ã—Å–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ
  function recalcOpenHeights() {
    list.querySelectorAll('.faq-item.is-open .faq-a').forEach(panel => {
      const inner = panel.firstElementChild;
      const target = inner ? inner.scrollHeight : panel.scrollHeight;
      panel.style.height = target + 'px';
    });
  }
  window.addEventListener('resize', recalcOpenHeights);

  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
  list.querySelectorAll('.faq-item').forEach(item => {
    const btn   = item.querySelector('.faq-q');
    const copy  = item.querySelector('.faq-q__copy');

    // –∫–ª–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å—É
    btn.addEventListener('click', () => {
      const isOpen = item.classList.contains('is-open');
      if (isOpen) closeItem(item);
      else openItem(item, true);

      // –æ–±–Ω–æ–≤–ª—è–µ–º hash –¥–ª—è deep-link
      if (btn.id) history.replaceState(null, '', '#' + btn.id);
    });

    // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (Space / Enter)
    btn.addEventListener('keydown', e => {
      if (e.key === ' ' || e.key === 'Spacebar' || e.key === 'Enter') {
        e.preventDefault();
        btn.click();
      }
    });

    // –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    copy?.addEventListener('click', e => {
      e.stopPropagation();
      const hash = btn.id || item.id || '';
      const url  = location.origin + location.pathname + (hash ? '#' + hash : '');
      navigator.clipboard.writeText(url).then(() => {
        copy.classList.add('copied');
        setTimeout(() => copy.classList.remove('copied'), 1200);
      });
    });
  });

  // –æ—Ç–∫—Ä—ã—Ç—å –ø–æ —Ö—ç—à—É (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ)
  function openFromHash() {
    const id = decodeURIComponent(location.hash.replace('#', ''));
    if (!id) return;
    const el = document.getElementById(id);
    const item = el ? el.closest('.faq-item') : null;
    if (item) openItem(item, true);
  }
  window.addEventListener('hashchange', openFromHash);
  openFromHash();
})();

/* ===== Slots: fetch + render per-day cards + header badge ===== */
(function initSlots(){
  const API_SLOTS_URL = 'https://script.google.com/macros/s/AKfycbw1sCLUCTPlaiHMFNsqPfgjTH6iCHp391m1lwYRX0g5AO7_Zme1uySp8jgQm9bsaR8EnQ/exec';
  const wrap  = document.querySelector('#slotsList');
  const badge = document.querySelector('#headerFreeBadge') || document.getElementById('availability-badge');
  const badgeText = badge?.querySelector('.avail-text') || badge?.querySelector('.txt') || badge;

  function setBadge(text, classes = []) {
    if (!badge || !badgeText) return;
    badge.classList.remove('is-today','is-tomorrow','is-next','is-none','is-live');
    classes.forEach(c => badge.classList.add(c));
    badgeText.textContent = text;
    badge.style.display = 'inline-flex';
  }

  if (!wrap) return;

  // ---- helpers -------------------------------------------------
  const pad2 = n => String(n).padStart(2,'0');
  const timeFromISO = iso => {
    if (!iso) return '';
    const d = new Date(iso);
    return `${pad2(d.getHours())}:${pad2(d.getMinutes())}`;
  };
  const fmtDateRUshort = ymd => {
    // ymd: 'YYYY-MM-DD'
    if (!ymd) return '';
    const [y,m,d] = ymd.split('-').map(Number);
    const dt = new Date(Date.UTC(y, m-1, d));
    // –ø—Ä–∏–º–µ—Ä: "–≤—Ç, 15.10"
    return dt.toLocaleDateString('ru-RU', { weekday:'short', day:'2-digit', month:'2-digit' });
  };

  const safeStart = s => s.startLabel || timeFromISO(s.startISO);
  const safeEnd   = s => s.endLabel   || timeFromISO(s.endISO);

  const groupByDate = (slots) => {
    const map = new Map();
    for (const s of slots) {
      const key = s.date || (s.startISO ? s.startISO.slice(0,10) : 'unknown');
      if (!map.has(key)) map.set(key, []);
      map.get(key).push(s);
    }
    // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤–Ω—É—Ç—Ä–∏ –¥–Ω—è –ø–æ –Ω–∞—á–∞–ª—É
    for (const arr of map.values()) {
      arr.sort((a,b) => (a.startTs ?? Date.parse(a.startISO||0)) - (b.startTs ?? Date.parse(b.startISO||0)));
    }
    // –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ [{date, items:[]}] ‚Äî —É–¥–æ–±–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ
    const out = Array.from(map.entries()).map(([date, items]) => ({ date, items }));
    out.sort((a,b) => a.date.localeCompare(b.date));
    return out;
  };

  const makeTimesLine = (items) => items
    .map(s => `${safeStart(s)}‚Äì${safeEnd(s)}`)
    .join(', ');

  const cardHTML = (date, items) => {
    const dayLabel = (items[0] && items[0].dayLabel) ? items[0].dayLabel : fmtDateRUshort(date);
    const times    = makeTimesLine(items);
    const href     = '#contact'; // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É
    return `
      <div class="slot-card">
        <div class="slot-date">${dayLabel}</div>
        <div class="slot-time">${times}</div>
        <a class="slot-cta" href="${href}">–ó–∞–ø—Ä–æ—Å–∏—Ç—å</a>
      </div>
    `;
  };

  // ---- load & render -------------------------------------------
  fetch(API_SLOTS_URL, { cache: 'no-store' })
    .then(r => r.json())
    .then(data => {
      const raw = Array.isArray(data?.slots) ? data.slots : (Array.isArray(data) ? data : []);

      window.__freeSlots = raw;

      updateBadge(raw);

      if (!raw.length) {
        wrap.innerHTML = '<p class="muted">–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>';
        return;
      }

      const days = groupByDate(raw);     // [{date, items:[...]}, ...]
      const topDays = days.slice(0, 5);  // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–Ω–µ–π (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)

      wrap.innerHTML = topDays.map(d => cardHTML(d.date, d.items)).join('');
    })
    catch(err){
  console.warn('Slots API error:', err);
  wrap.innerHTML = '<p class="error">–°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.</p>';
  setBadge('–°–≤–æ–±–æ–¥–Ω–æ: –ø–æ –∑–∞–ø—Ä–æ—Å—É', ['is-none']);
    }
  );
})();

// Active menu on scroll
(function(){
  const links = [...document.querySelectorAll('.header-nav a[href^="#"]')];
  const map = new Map();
  links.forEach(a => {
    const id = a.getAttribute('href').slice(1);
    const sec = document.getElementById(id);
    if (sec) map.set(sec, a);
  });
  if (!map.size) return;

  const io = new IntersectionObserver((entries)=>{
    entries.forEach(e=>{
      const link = map.get(e.target);
      if (!link) return;
      if (e.isIntersecting) {
        links.forEach(l => l.classList.remove('is-active'));
        link.classList.add('is-active');
      }
    });
  }, { rootMargin: `-${parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-h'))||64}px 0px -65% 0px`, threshold: 0.01 });

  map.forEach((_, sec) => io.observe(sec));
})();

/* ===== Reviews: –ª—ë–≥–∫–∞—è –±–µ—Å—à–æ–≤–Ω–∞—è ¬´–º–∞—Ä–∫–∏–∑–∞¬ª (CSS-–∞–Ω–∏–º–∞—Ü–∏—è) =============== */
(function initReviewsMarquee(){
  const marquees = document.querySelectorAll('.rv-marquee');
  if (!marquees.length) return;

  const mrm = matchMedia('(prefers-reduced-motion: reduce)');

  marquees.forEach(mq => {
    const track = mq.querySelector('.rv-track');
    if (!track || track.dataset.marqueeReady) return;

    /* –Ω–µ –¥–∞—ë–º –∫–∞—Ä—Ç–æ—á–∫–∞–º –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å—Å—è –≤–æ 2-—é —Å—Ç—Ä–æ–∫—É –¥–∞–∂–µ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö */
    track.style.display   = 'flex';
    track.style.flexWrap  = 'nowrap';
    track.style.alignItems= 'stretch';

    /* --- –¥—É–±–ª–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ—Ä–æ–∂–∫–∏ (–∞ –Ω–µ –≤—Ç–æ—Ä—É—é .rv-track) --- */
    const cloneChildrenOnce = () => {
      const frag = document.createDocumentFragment();
      Array.from(track.children).forEach(node => frag.appendChild(node.cloneNode(true)));
      track.appendChild(frag);
    };

    if (!track.dataset.cloned) {
      cloneChildrenOnce();            // –ø–æ–ª—É—á–∞–µ–º ¬´–æ—Ä–∏–≥–∏–Ω–∞–ª + –∫–ª–æ–Ω¬ª
      track.dataset.cloned = '1';
    }

    /* –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —à–∏—Ä–∏–Ω—ã —Ö–≤–∞—Ç–∏—Ç –º–∏–Ω–∏–º—É–º –Ω–∞ 2√ó viewport (–±–µ–∑ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ while) */
    const needMinWidth = () => track.scrollWidth < mq.clientWidth * 2;
    let safety = 0;
    while (needMinWidth() && safety < 3) { // –º–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ –¥–æ-–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      cloneChildrenOnce();
      safety++;
    }

    /* ‚Äî –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ‚Äî */
    const pause = () => track.style.animationPlayState = 'paused';
    const play  = () => track.style.animationPlayState = '';

    mq.addEventListener('mouseenter', pause);
    mq.addEventListener('mouseleave', play);
    mq.addEventListener('focusin',   pause);
    mq.addEventListener('focusout',  play);

    /* –£–≤–∞–∂–µ–Ω–∏–µ –∫ prefers-reduced-motion */
    const applyReduced = () => { track.style.animation = mrm.matches ? 'none' : ''; };
    applyReduced();
    mrm.addEventListener?.('change', applyReduced);

    track.dataset.marqueeReady = '1';
  });
})();

// ====== CONTACT ======
(function contactInit(){
  const tg   = document.getElementById('ctaTg');
  const vb   = document.getElementById('ctaViber');
  const tel  = document.getElementById('ctaTel');

  // ‚Äî‚Äî‚Äî –í–ü–ò–®–ò —Å–≤–æ–π –Ω–æ–º–µ—Ä (–±–µ–∑ –ø–ª—é—Å–∞), –∞ —Ç–∞–∫–∂–µ TG-—é–∑–µ—Ä–Ω–µ–π–º/–ª–∏–Ω–∫ ‚Äî‚Äî‚Äî
  const phoneDigits = '381XXXXXXXXX';         // –ø—Ä–∏–º–µ—Ä: 381641234567
  if (tg)  tg.href  = 'https://t.me/yourusername';
  if (vb)  vb.href  = `viber://chat?number=%2B${phoneDigits}`;
  if (tel) tel.href = `tel:+${phoneDigits}`;

  // ‚Äî‚Äî‚Äî —Ñ–æ—Ä–º–∞ ‚Äî‚Äî‚Äî
  const form = document.getElementById('contactForm');
  const note = document.getElementById('contactNotice');
  const name = document.getElementById('cname');
  const cont = document.getElementById('ccontact');
  const time = document.getElementById('ctime');
  const msg  = document.getElementById('cmsg');
  const eName= document.getElementById('err-name');
  const eCont= document.getElementById('err-contact');
  let t0 = Date.now();

  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —á–µ–∫–±–æ–∫—Å–∞
(function attachAgreeValidation(){
  const form      = document.getElementById('contactForm');
  if (!form) return;

  const agree     = form.querySelector('#cagree');     // —á–µ–∫–±–æ–∫—Å

  // —Å–Ω–∏–º–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞
  agree?.addEventListener('change', () => {
    agree.classList.remove('is-error');
    // agreeWrap?.classList.remove('is-error');
  });

  form.addEventListener('submit', (e) => {
    // –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω:
    if (!agree?.checked) {
      e.preventDefault();
      // –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ò–ú–ï–ù–ù–û —á–µ–∫–±–æ–∫—Å
      agree.classList.add('is-error');
      agree.focus();
      return;
    }
  });
})();

  
  // —É—Ç–∏–ª–∏—Ç—ã
  const setErr = (el, small, on) => {
    el.classList.toggle('invalid', on);
    el.setAttribute('aria-invalid', on ? 'true' : 'false');
    if (small) small.hidden = !on;
  };
  [name,cont].forEach(i => i.addEventListener('input', ()=> setErr(i, i===name?eName:eCont, !i.value.trim())));

  form?.addEventListener('submit', async (e)=>{
    e.preventDefault();

    // honeypot/time-trap
    if (form.website?.value) return;
    if (Date.now() - t0 < 1200) return;

    const badName = name.value.trim().length < 3;   // ‚Üê –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞
    const badCont = !cont.value.trim();             // –∫–∞–∫ –±—ã–ª–æ

// setErr –æ—Å—Ç–∞–≤–ª—è–µ–º: –æ–Ω —Å—Ç–∞–≤–∏—Ç aria-invalid –∏ .invalid (–ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º u —Ç–µ–±—è —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –º–æ–¥—É–ª–µ–º inFieldErrors)
setErr(name, eName, badName);
setErr(cont, eCont, badCont);

if (badName || badCont) {
  (badName ? name : cont).focus();
  return;
}

    // –º–æ–∂–Ω–æ –¥–æ–±./–∏–∑–º–µ–Ω–∏—Ç—å endpoint Google Apps Script
    const fd = new FormData(form);
    try{
      const res = await fetch('https://script.google.com/macros/s/YOUR_DEPLOY_ID/exec', { method:'POST', body:fd });
      if (!res.ok) throw 0;
      note.textContent = '–°–ø–∞—Å–∏–±–æ! –Ø –æ—Ç–≤–µ—á—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
      form.reset(); t0 = Date.now();
      window.gtag?.('event','contact_form_submit',{success:true});
    }catch{
      note.textContent = '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ Telegram.';
      window.gtag?.('event','contact_form_submit',{success:false});
    }
  });
})();

(function(){
  // –ö–ª—é—á –≤ localStorage: –≤–µ—Ä—Å–∏—è –º–µ–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–º–µ–Ω—è–µ—à—å –ø–æ–ª–∏—Ç–∏–∫—É
  const KEY = 'cookieConsent.v1';

  const banner  = document.getElementById('cookie-banner');
  const accept  = document.getElementById('cookie-accept');
  const decline = document.getElementById('cookie-decline');
  const manage  = document.getElementById('cookie-manage');

  // –∑–∞—â–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –Ω–µ —É–ø–∞–¥—É—Ç, –µ—Å–ª–∏ gtag –Ω–µ—Ç
  function gaConsent(state){
    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–± GA4 –æ–±—ä—è–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ
    window.gtag?.('consent', 'update', { analytics_storage: state });
  }

  function show(){ banner.hidden = false; }
  function hide(){ banner.hidden = true; }

  function save(state){
    localStorage.setItem(KEY, state);
    gaConsent(state === 'granted' ? 'granted' : 'denied');
  }

  // –ü–æ–∫–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∏–∑–∏—Ç–µ
  const saved = localStorage.getItem(KEY);
  if (!saved){ show(); } else { gaConsent(saved === 'granted' ? 'granted' : 'denied'); }

  accept?.addEventListener('click', () => { save('granted'); hide(); });
  decline?.addEventListener('click', () => { save('denied');  hide(); });
  // –õ—é–±–∞—è –∫–Ω–æ–ø–∫–∞/—Å—Å—ã–ª–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ cookie"
  manage?.addEventListener('click', () => show());
})();

/* === PHONE MASK (+381 XX XXX XX XX) & AUTOFILL NEAREST SLOT ============= */
(function contactEnhance(){
  const phoneInput = document.getElementById('ccontact');
  const timeInput  = document.getElementById('ctime');

  /* ---------- 1) –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–°–µ—Ä–±–∏—è) ---------- */
  function formatSerbiaPhone(raw){
    // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    let d = String(raw).replace(/\D+/g, '');
    // –µ—Å–ª–∏ –≤–≤–µ–ª–∏ 00... ‚Üí —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π
    if (d.startsWith('00')) d = d.slice(2);
    // –µ—Å–ª–∏ –≤–≤–µ–ª–∏ 8... (—á–∞—Å—Ç–æ —Ç–∞–∫ –∫–æ–ø–∏—Ä—É—é—Ç), –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–∏—Å–∞—Ç—å –Ω–µ –Ω–æ–º–µ—Ä
    // –º–∞—Å–∫—É –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —è–≤–Ω–æ –∏–¥—ë–º –≤ —Å—Ç–æ—Ä–æ–Ω—É +381
    if (!d.startsWith('381')) {
      // –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞—é—Ç —Ü–∏—Ñ—Ä—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç —Å 3/38), –¥–∞–¥–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–π—Ç–∏ –¥–æ 381
      if (d.length < 3) return '+' + d;
      // –∏–Ω–∞—á–µ –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–µ–º –º–∞—Å–∫—É
      return raw;
    }
    // —É–±–∏—Ä–∞–µ–º —Å–∞–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    d = d.slice(3);
    const p1 = d.slice(0,2);
    const p2 = d.slice(2,5);
    const p3 = d.slice(5,7);
    const p4 = d.slice(7,9);

    let out = '+381';
    if (p1) out += ' ' + p1;
    if (p2) out += ' ' + p2;
    if (p3) out += ' ' + p3;
    if (p4) out += ' ' + p4;
    return out;
  }

  function maybeMaskPhone(e){
    if (!phoneInput) return;
    const v = phoneInput.value.trim();
    // –ú–∞—Å–∫—É –ø—Ä–∏–º–µ–Ω—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç —Ü–∏—Ñ—Ä—ã/–ø–ª—é—Å (–∞ –Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, @username)
    if (/^[+\d][\d\s()-]*$/.test(v)) {
      const caretEnd = phoneInput.selectionEnd;
      phoneInput.value = formatSerbiaPhone(v);
      // —É–ø—Ä–æ—â—ë–Ω–Ω–æ: —Å—Ç–∞–≤–∏–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü (—Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫–µ–π—Å–æ–≤)
      phoneInput.setSelectionRange(phoneInput.value.length, phoneInput.value.length);
    }
  }

  phoneInput?.addEventListener('input', maybeMaskPhone);
  phoneInput?.addEventListener('blur',  maybeMaskPhone);

  /* ---------- 2) –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ¬´–ñ–µ–ª–∞–µ–º–æ–π –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏¬ª –±–ª–∏–∂–∞–π—à–∏–º —Å–ª–æ—Ç–æ–º ---------- */
  function formatDayRU(date){
    // –ø–Ω, 14.10
    return date.toLocaleDateString('ru-RU', { weekday:'short', day:'2-digit', month:'2-digit' });
  }
  function getNearestSlotFromGlobal(){
    // –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É–∂–µ –µ—Å—Ç—å –º–æ–¥—É–ª—å —Å–ª–æ—Ç–æ–≤ –∏ –æ–Ω –ø–æ–ª–æ–∂–∏–ª —Å–ª–æ—Ç—ã –≥–ª–æ–±–∞–ª—å–Ω–æ
    const arr = Array.isArray(window.__freeSlots) ? window.__freeSlots : null;
    if (!arr || !arr.length) return null;
    const now = Date.now();
    const getTs = s => s.startTs ?? Date.parse(s.startISO || 0);
    const sorted = arr
      .filter(s => getTs(s) > now)
      .sort((a,b)=> getTs(a) - getTs(b));
    const s = sorted[0];
    if (!s) return null;

    const labelDay  = s.dayLabel || formatDayRU(new Date(getTs(s)));
    const startText = s.startLabel || (s.startISO ? new Date(s.startISO).toTimeString().slice(0,5) : '');
    const endText   = s.endLabel   || (s.endISO   ? new Date(s.endISO).toTimeString().slice(0,5)   : '');
    return `${labelDay} ¬∑ ${startText}‚Äì${endText}`;
  }

  function getNearestSlotFromBadge(){
    const b = document.querySelector('#headerFreeBadge');
    if (!b) return null;
    const t = b.textContent.toLowerCase().trim();
    // –≤–∞—Ä–∏–∞–Ω—Ç—ã:
    // ¬´–°–≤–æ–±–æ–¥–Ω–æ —Å–µ–≥–æ–¥–Ω—è 09:00‚Äì16:00¬ª
    // ¬´–°–≤–æ–±–æ–¥–Ω–æ –∑–∞–≤—Ç—Ä–∞ 09:00‚Äì16:00¬ª
    // ¬´–ë–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç: –≤—Ç, 14.10 ‚Ä¢ 09:00‚Äì16:00¬ª
    const timeRange = (t.match(/\b(\d{2}:\d{2}‚Äì\d{2}:\d{2})\b/)||[])[1];

    if (t.includes('—Å–µ–≥–æ–¥–Ω—è') && timeRange){
      const d = new Date();
      return `${formatDayRU(d)} ¬∑ ${timeRange}`;
    }
    if (t.includes('–∑–∞–≤—Ç—Ä–∞') && timeRange){
      const d = new Date(Date.now() + 86400000);
      return `${formatDayRU(d)} ¬∑ ${timeRange}`;
    }
    // ¬´–≤—Ç, 14.10 ‚Ä¢ 09:00‚Äì16:00¬ª
    const day = (t.match(/([–∞-—è]{2},?\s*\d{1,2}\.\d{1,2})/)||[])[1];
    if (day && timeRange){
      // –ø—Ä–∏–≤–æ–¥–∏–º ¬´–≤—Ç, 14.10¬ª ‚Üí ¬´–≤—Ç, 14.10¬ª
      return `${day.replace(/\s+/g,' ')} ¬∑ ${timeRange}`;
    }
    return null;
  }

  function autofillPreferredTime(){
    if (!timeInput || timeInput.value.trim()) return; // —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É—é
    let label = getNearestSlotFromGlobal();
    if (!label) label = getNearestSlotFromBadge();
    if (label) timeInput.value = label;
  }

  // –ø—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É –∏ –ø–æ—Å–ª–µ –º–∞–∫—Ä–æ-—Ç–∏–∫–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–æ–¥—É–ª—å —Å–ª–æ—Ç–æ–≤ –ø–æ–¥–ª–æ–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
  autofillPreferredTime();
  setTimeout(autofillPreferredTime, 600);
})();

// === –ö–ª–∏–∫ –ø–æ "–ó–∞–ø—Ä–æ—Å–∏—Ç—å" –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–ª–æ—Ç–∞ ‚Üí –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∏ –ø—Ä–æ—Å–∫—Ä–æ–ª–ª–∏—Ç—å –∫ –Ω–µ–π
(function attachSlotPrefill(){
  document.addEventListener('click', (ev) => {
    const btn = ev.target.closest('.slot-cta');
    if (!btn) return;

    const card = btn.closest('.slot-card');
    if (!card) return;

    // –¢–µ–∫—Å—Ç –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
    const dateTxt = (card.querySelector('.slot-date')?.textContent || '').trim();
    const timeTxt = (card.querySelector('.slot-time')?.textContent || '').trim();
    if (!dateTxt && !timeTxt) return;

    // –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—è
    const wishValue = [dateTxt, timeTxt].filter(Boolean).join(' ‚Ä¢ ');

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ ¬´–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è¬ª
    const wishInput =
      document.querySelector('#ctime') ||                                             // ‚Üê –≤–∞—à id
      document.querySelector('#contact input[name="preferred_time"]') ||              // ‚Üê –≤–∞—à–µ name
      document.querySelector('#contact input[name="wish"]') ||
      document.querySelector('#contact input#wish') ||
      document.querySelector('#contact input#contact-wish') ||
      document.querySelector('#contact input#wishTime') ||
      Array.from(document.querySelectorAll('#contact input[type="text"]'))
        .find(i => (i.placeholder || '').toLowerCase().startsWith('–Ω–∞–ø—Ä'));

    if (wishInput) {
      ev.preventDefault();                      // —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ ‚Äî —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–µ passive
      wishInput.value = wishValue;
      wishInput.dispatchEvent(new Event('input', { bubbles: true }));
    }

    // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –∫ —Ñ–æ—Ä–º–µ + —Ñ–æ–∫—É—Å
    const formBlock = document.getElementById('contact');
    if (formBlock) {
      formBlock.scrollIntoView({ behavior: 'smooth', block: 'start' });
      setTimeout(() => wishInput?.focus(), 350);
    }
  }); // ‚Üê –±–µ–∑ { passive:true }
})();

// === In-field error helper ===

(function inFieldErrors() {
  const form = document.querySelector('#contactForm');
  if (!form) return;

  // –∫–∞–∫–∏–µ –ø–æ–ª—è –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º
  const fields = [
    { sel: '#cname',    err: '#err-name',    msg: '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è', minLen: 3 },
    { sel: '#ccontact', err: '#err-contact', msg: '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username' }
  ];

  const setInFieldError = (fld, msg) => {
    const wrap = fld.closest('.fld');
    if (!wrap) return;
    if (!fld.dataset.oldPh) fld.dataset.oldPh = fld.placeholder || '';
    wrap.classList.add('infield-err');
    fld.value = '';
    fld.placeholder = msg;
    fld.setAttribute('aria-invalid', 'true');
  };

  const clearInFieldError = (fld) => {
    const wrap = fld.closest('.fld');
    if (!wrap) return;
    wrap.classList.remove('infield-err');
    fld.placeholder = fld.dataset.oldPh || '';
    fld.removeAttribute('aria-invalid');
  };

  // –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ‚Äî –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ/—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–æ—à–∏–±–∫—É –≤ –ø–æ–ª–µ¬ª
  form.addEventListener('submit', (e) => {
    let bad = false;
    fields.forEach((f) => {
      const input = form.querySelector(f.sel);
      const hint  = form.querySelector(f.err);
      if (!input) return;

      const v = input.value.trim();
      const tooShort = f.minLen ? v.length < f.minLen : false;

      if (!v || tooShort) {
        e.preventDefault();
        setInFieldError(input, f.msg);
        if (hint) hint.hidden = true;
        if (!bad) input.focus();
        bad = true;
      }
    });
  });

  // –ø—Ä–∏ –≤–≤–æ–¥–µ/–±–ª—é—Ä–µ ‚Äî —Å–±—Ä–æ—Å/–ø–æ–≤—Ç–æ—Ä –æ—à–∏–±–∫–∏
  fields.forEach((f) => {
    const input = form.querySelector(f.sel);
    const hint  = form.querySelector(f.err);
    if (!input) return;

    input.addEventListener('input', () => {
      clearInFieldError(input);
      if (hint) hint.hidden = true;
    });

    input.addEventListener('blur', () => {
      const v = input.value.trim();
      const tooShort = f.minLen ? v.length < f.minLen : false;
      if (!v || tooShort) {
        setInFieldError(input, f.msg);
        if (hint) hint.hidden = true;
      }
    });
  });
})();

/* === HERO slider ===================================================== */
(function initHeroSlider(){
  function boot(){
    const root = document.querySelector('.hero-slider');
    if (!root) return;

    const track  = root.querySelector('.hs-track');
    const slides = [...root.querySelectorAll('.hs-slide')];
    const prev   = root.querySelector('.hs-nav.prev');
    const next   = root.querySelector('.hs-nav.next');
    const dots   = [...root.querySelectorAll('.hs-dot')];
    const mrm    = matchMedia('(prefers-reduced-motion: reduce)');

    let i = 0, timer = null, startX = 0, dx = 0;

    function go(n){
      i = (n + slides.length) % slides.length;
      track.style.transform = `translate3d(${-i*100}%,0,0)`;
      slides.forEach((s,idx)=> s.classList.toggle('is-active', idx===i));
      dots.forEach((d,idx)=>{
        d.classList.toggle('is-active', idx===i);
        d.setAttribute('aria-selected', idx===i ? 'true' : 'false');
      });
    }
    function play(){ if(!mrm.matches){ stop(); timer=setInterval(()=>go(i+1),5000);} }
    function stop(){ if(timer){ clearInterval(timer); timer=null; } }

    prev?.addEventListener('click', ()=>{ go(i-1); play(); });
    next?.addEventListener('click', ()=>{ go(i+1); play(); });
    dots.forEach((d,idx)=> d.addEventListener('click', ()=>{ go(idx); play(); }));

    ['mouseenter','focusin'].forEach(ev => root.addEventListener(ev, stop));
    ['mouseleave','focusout'].forEach(ev => root.addEventListener(ev, play));

    root.addEventListener('pointerdown', e => { startX=e.clientX; dx=0; root.setPointerCapture(e.pointerId); stop(); });
    root.addEventListener('pointermove',  e => { if(!startX) return; dx=e.clientX-startX; });
    root.addEventListener('pointerup',    () => { if(Math.abs(dx)>40) go(i + (dx<0?1:-1)); startX=0; dx=0; play(); });

    root.tabIndex = 0; // —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω –∫–∞—Ä—É—Å–µ–ª–∏
    root.addEventListener('keydown', e => {
      if (e.key === 'ArrowLeft')  { e.preventDefault(); go(i-1); play(); }
      if (e.key === 'ArrowRight') { e.preventDefault(); go(i+1); play(); }
    });

    go(0); play();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', boot);
  } else {
    boot();
  }
})();

// –§–∏–ª—å—Ç—Ä "–í—Å–µ / –ë–∞–∑–æ–≤—ã–µ / –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ"
(() => {
  const root = document.querySelector('#services');
  if (!root) return;

  const chips = root.querySelectorAll('.svc-chip');
  const cards = root.querySelectorAll('.svc-card');

  chips.forEach(ch => ch.addEventListener('click', () => {
    chips.forEach(c => c.classList.remove('is-active'));
    ch.classList.add('is-active');

    const f = ch.dataset.filter;
    cards.forEach(card => {
      const tier = card.dataset.tier; // "base" | "extra"
      card.style.display =
        f === 'all' ? '' :
        (f === tier ? '' : 'none');
    });
  }));
})();






























